// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  //directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwofactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events    Event[]
  tickets   Ticket[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwofactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  MEETUP
  CONCERT
  EXHIBITION
  SPORTS
  OTHER
}

enum ExternalLinkType {
  YOUTUBE
  TELEGRAM
  WEBSITE
  INSTAGRAM
  TWITTER
  FACEBOOK
}

enum EventStatus {
  ACTIVE
  CLOSED
  CANCELLED
}

model Event {
  id          String      @id @default(cuid())
  name        String
  category    EventCategory
  description String      @db.Text
  bannerUrl   String      @default("/placeholder.png")
  date        DateTime
  time        String      // Store as HH:mm
  location    String
  price       Float
  totalSeats  Int
  rules       String      @db.Text
  status      EventStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // External links as JSON to allow multiple links of same type
  externalLinks Json?     // { type: ExternalLinkType, url: string }[]
  
  // Relations (assuming you'll need these later)
  organizerId String
  organizer   User     @relation(fields: [organizerId], references: [id])
  tickets     Ticket[]

  upiId       String     // Add this field

  @@index([organizerId])
}

model Ticket {
  id          String    @id @default(cuid())
  eventId     String
  userId      String
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  claimed     Boolean   @default(false)
  claimedAt   DateTime?

  @@index([eventId])
  @@index([userId])
}
